{"meta":{"title":"窄门","subtitle":"","description":"","author":"zzx","url":"https://zzx-dear.github.io","root":"/"},"pages":[{"title":"categories","date":"2024-05-12T05:50:09.000Z","updated":"2024-05-12T05:50:09.955Z","comments":true,"path":"categories/index.html","permalink":"https://zzx-dear.github.io/categories/index.html","excerpt":"","text":""},{"title":"messageboard","date":"2024-05-12T05:50:30.000Z","updated":"2024-05-12T05:50:30.266Z","comments":true,"path":"messageboard/index.html","permalink":"https://zzx-dear.github.io/messageboard/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-06-15T16:34:27.000Z","updated":"2024-05-12T06:18:11.070Z","comments":true,"path":"link/index.html","permalink":"https://zzx-dear.github.io/link/index.html","excerpt":"","text":".links-content{ margin-top:1rem; } .link-navigation::after { content: \" \"; display: block; clear: both; } .card { width: 45%; font-size: 1rem; padding: 10px 20px; border-radius: 4px; transition-duration: 0.15s; margin-bottom: 1rem; display:flex; } .card:nth-child(odd) { float: left; } .card:nth-child(even) { float: right; } .card:hover { transform: scale(1.1); box-shadow: 0 2px 6px 0 rgba(0, 0, 0, 0.12), 0 0 6px 0 rgba(0, 0, 0, 0.04); } .card a { border:none; } .card .ava { width: 3rem!important; height: 3rem!important; margin:0!important; margin-right: 1em!important; border-radius:4px; } .card .card-header { font-style: italic; overflow: hidden; width: 100%; } .card .card-header a { font-style: normal; color: #2bbc8a; font-weight: bold; text-decoration: none; } .card .card-header a:hover { color: #d480aa; text-decoration: none; } .card .card-header .info { font-style:normal; color:#a3a3a3; font-size:14px; min-width: 0; overflow: hidden; white-space: nowrap; } ZW’s blog 这是一个分享IT技术的小站。 越行勤's Blog 努力学习的小菜鸟"},{"title":"about","date":"2024-05-12T05:59:41.000Z","updated":"2024-05-12T05:59:41.804Z","comments":true,"path":"about/index.html","permalink":"https://zzx-dear.github.io/about/index.html","excerpt":"","text":""},{"title":"timeline","date":"2024-05-12T05:59:24.000Z","updated":"2024-05-12T05:59:24.706Z","comments":true,"path":"timeline/index.html","permalink":"https://zzx-dear.github.io/timeline/index.html","excerpt":"","text":""},{"title":"myself","date":"2024-05-12T05:59:54.000Z","updated":"2024-05-12T05:59:54.427Z","comments":true,"path":"myself/index.html","permalink":"https://zzx-dear.github.io/myself/index.html","excerpt":"","text":""},{"title":"tags","date":"2024-05-12T05:49:03.000Z","updated":"2024-05-12T05:49:03.541Z","comments":true,"path":"tags/index.html","permalink":"https://zzx-dear.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"象集与除运算","slug":"象集与除运算","date":"2024-06-25T06:59:23.000Z","updated":"2024-06-25T07:37:51.350Z","comments":true,"path":"2024/06/25/象集与除运算/","permalink":"https://zzx-dear.github.io/2024/06/25/%E8%B1%A1%E9%9B%86%E4%B8%8E%E9%99%A4%E8%BF%90%E7%AE%97/","excerpt":"","text":"象集与除运算 在此简单解释一下象集与除运算的概念象集课本中的概念：给定一个关系R（X，Z），X 和Z 为属性组。当 t[X] &#x3D; x 时，x 在 R 中的象集(Images Set)为：Zx&#x3D; { t[Z] | t ∈R，t[X] &#x3D; x}，表示R中属性组X上值为x的诸元组在属性组Z上分量的集合。 可以根据上图中Course表来理解，比如Cno属性列的 1 它的象集就是{数据库，5，4};（可以理解为与它在同一行的元素） 除运算课本中的概念：关系R除以S的结果为关系T，则T包含所有在R但不在S中的属性及值，且T的元组与S的元组的所有组合都在R中。 可以分三步理解: 第一步：找到在关系R与S中都存在的属性B C 第二步：在R中选一个S中不存在的属性A并求它下面元素的象集 第三步：所求象集中与关系S中BC属性完全对的上的组成关系T 元素a1的象集为{（b1,c2）(b2,c3) (b2,c1)} 可以看到只有a1的象集与关系S中BC属性的元素完全对应 所以R&#x2F;S &#x3D; {a1} 例题：","categories":[],"tags":[]},{"title":"进程的创建、终止、阻塞与唤醒","slug":"进程的创建、终止、阻塞与唤醒","date":"2024-05-25T11:41:27.000Z","updated":"2024-05-25T13:04:06.979Z","comments":true,"path":"2024/05/25/进程的创建、终止、阻塞与唤醒/","permalink":"https://zzx-dear.github.io/2024/05/25/%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E3%80%81%E7%BB%88%E6%AD%A2%E3%80%81%E9%98%BB%E5%A1%9E%E4%B8%8E%E5%94%A4%E9%86%92/","excerpt":"","text":"进程的创建、终止、阻塞与唤醒进程的创建 补充图中知识（一）PCB​ 1.是进程实体的一部分，是进程存在的唯一标志。系统唯有通过进程的PCB才能感知到进程的存在。 ​ 2.主要包括进程描述信息、进程控制和管理信息、资源分配清单和CPU 相关信息等。各部分的主要 说明如下： ​ （1）进程描述信息。进程标识符：标志各个进程，每个进程都有一个唯一的标识号。用户标识符：进程所归属的用户，用户标识符主要为共享和保护服务。 ​ （2）进程控制和管理信息。进程当前状态：描述进程的状态信息，作为CPU 分配调度的依据。进程优先级：描述进程抢占CPU的优先级，优先级高的进程可优先获得CPU。 ​ （3) 资源分配清单，用于说明有关内存地址空间或虚拟地址空间的状况，所打开文件的列表和所使用的输入&#x2F;输出设备信息。 ​ （4) 处理机相关信息，也称CPU 的上下文，主要指 CPU 中各寄存器的值。当进程处于执行态时，CPU 的许多信息都在寄存器中。当进程被切换时，CPU 状态信息都必须保存在相应的PCB中，以便在该进程重新执行时，能从断点继续执行。 （二）父进程与子进程的关系和特点​ 允许一个进程创建另一个进程，此时创建者称为父进程，被创建的进程称为子进程。子进程可以继承父进程所拥有的资源。当子进程被撤销时，应将其从父进程那里获得的资源还给父进程。此外，在撤销父进程时，通常也会同时撤销其所有的子进程。 （三）导致创建进程的操作​ 在操作系统中，终端用户登录系统、作业调度、系统提供服务、用户程序的应用请求等都会引起进程的创建。 进程的终止 引起进程终止的事件主要有：​ ①正常结束，表示进程的任务已完成并准备退出运行。②异常结束，表示进程在运行时，发生了某种异常事件，使程序无法继续运行，如存储区越界、保护错、非法指令、特权指令错、运行超时、算术运算错、I&#x2F;O 故障等。③外界干预，指进程应外界的请求而终止运行，如操作员或操作系统干预、父进程请求和父进程终止。 进程的阻塞与唤醒​ 正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新任务可做等，进程便通过调用阻塞原语(Block)，使自己由运行态变为阻塞态。可见，阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程(获得CPU)，才可能将其转为阻塞态。阻塞原语的执行过程如下：(1)找到将要被阻塞进程的标识号(PID)对应的PCB。(2)若该进程为运行态，则保护其现场，将其状态转为阻塞态，停止运行。(3)将该PCB插入相应事件的等待队列，将CPU资源调度给其他就绪进程。 ​ 进程唤醒的事件与时机当被阻塞进程所期待的事件出现时，如它所期待的I&#x2F;O操作已完成或其所期待的数据已到达，由有关进程(比如，释放该I&#x2F;O设备的进程，或提供数据的进程)调用唤醒原语(Wakeup)，将等待该事件的进程唤醒。唤醒原语的执行过程如下：(1)在该事件的等待队列中找到相应进程的PCB。(2)将其从等待队列中移出，并置其状态为就绪态。(3)将该PCB插入就绪队列，等待调度程序调度。​ 应当注意，Block 原语和Wakeup 原语是一对作用刚好相反的原语，必须成对使用。如果在某个进程中调用了Block 原语，则必须在与之合作的或其他相关的进程中安排一条相应的Wakeup原语，以便唤醒阻塞进程；否则，阻塞进程将因不能被唤醒而永久地处于阻塞态。","categories":[],"tags":[]},{"title":"模式分解（一）无损连接性","slug":"有无损连接性","date":"2024-05-20T13:16:29.000Z","updated":"2024-05-21T01:58:58.707Z","comments":true,"path":"2024/05/20/有无损连接性/","permalink":"https://zzx-dear.github.io/2024/05/20/%E6%9C%89%E6%97%A0%E6%8D%9F%E8%BF%9E%E6%8E%A5%E6%80%A7/","excerpt":"","text":"模式分解（一）无损连接性定义：说人话就是 把不符合模式要求的大表分解成多个小表使符合要求特别注意：不能相互嵌套 EG: R3嵌套于R2 补充几种用到的连接（一）等值连接 比较的都是B属性 但是可以B和E进行等值连接 等值连接必须要有等值条件 （二）自然连接​ 自然连接是特殊的等值连接，必须要有相同的属性列。 （三）在进行表连接时的两种情况​ 1.有相同属性列 进行自然连接 ​ 2.没有相同属性列 进行笛卡尔积连接 表连接后的情况​ A大表分解出B小表和C小表 BC连接等到D表 ​ 1. BC连接后的D表 一定包含大表A 数据只可能多，不可能少 ​ 2. D表按照 A表分解的属性，分解后，得到的仍是BC两个小表 ​ 3. D表与B表或C表连接后 仍是D表 ​ 如果D表和A表完全一样（数据不多不少）才证明有无损连接性 从左向右前四个表依次是ABCD表 可带入思考一下 判断无损链接的算法第一步：构建初始表 表的行数取决于大表U的元素个数 表的列数取决去分解出的小表个数 在一行中如果对应小表存在此元素填入ai（i为列标） 不存在此元素填入bij（i为行标，j为列标） 第二步：根据F中的函数依赖修改表的内容以R1表为例 函数依赖 C-&gt;D 由于R1中有c元素，所以可以得到D元素，把表中b14改为a4 最终结果 第三步：算法终止如果有一行全为a标签 算法终止 证明有无损连接性 根据F中函数依赖扫描前后 表无变化 算法终止 且没有一行全为a标签 证明没有无损连接性","categories":[],"tags":[]},{"title":"高斯数据库数据操作实例","slug":"高斯数据库数据操作实例","date":"2024-05-14T13:13:49.000Z","updated":"2024-05-14T14:12:01.259Z","comments":true,"path":"2024/05/14/高斯数据库数据操作实例/","permalink":"https://zzx-dear.github.io/2024/05/14/%E9%AB%98%E6%96%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B/","excerpt":"","text":"高斯数据库 数据查询实例（一） 空值对结果的影响（例如在计算sum, avg, min集函数时系统如何处理空值属性）？ 在gauss数据库中空值不做处理 *储备知识：*（一）索引的概念​ 索引（在MySQL中也叫做“键（key）”）是存储引擎用于快速找到记录的一种数据结构，这也是索引最基本的功能。 ​ 索引对于良好的性能非常关键。数据量越大时，索引对性能的影响也越重要，好的索引可以将查询性能提高几个数量级。在数据量较小且负载较低时，不恰当的索引对性能的影响可能还不明显，但是在数据量逐渐增大时，糟糕的索引会使MySQL的性能急剧的下降。 ​ 索引优化是查询性能优化最有效的手段。 ​ 如果想要在一本书中找到某个特定主题，一般会先看书的目录，找到对应的页码，然后直接翻到对应的页码即可查看。存储引擎用类似的方法使用索引，首先在索引中找到对应的值，然后根据匹配的索引记录找到对应的数据行。简单的说，数据库索引类似于书前面的目录，能加快数据库的查询速度。 （二）索引的类别按照功能逻辑区分，目前主要有以下索引类型： 1、主键索引​ 数据列不允许重复，不允许为NULL，一个表只能有一个主键。 ALTER TABLE table_name ADD PRIMARY KEY (column); 2、普通索引​ MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和NULL值。一个表允许多个列创建普通索引。 ALTER TABLE table_name ADD INDEX index_name (column); 3、唯一索引​ 索引列中的值必须是唯一的，但是允许NULL值。建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。一个表允许多个列创建唯一索引。 ALTER TABLE table_name ADD UNIQUE (column); 4、全文索引​ 主要是为了快速检索大文本数据中的关键字的信息。字段长度比较大时，如果创建普通索引，在进行like模糊查询时效率比较低，这时可以创建全文索引，基于倒排索引，类似于搜索引擎。 ALTER TABLE table_name ADD FULLTEXT (column); 5、前缀索引​ 在文本类型如BLOB、TEXT或者很长的VARCHAR列上创建索引时，可以使用前缀索引，数据量相比普通索引更小，可以指定索引列的长度，但是数值类型不能指定。 ALTER TABLE table_name ADD KEY(column_name(prefix_length)); 6、组合索引​ 指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀原则。 主键索引、普通索引、唯一索引等都可以使用多个字段形成组合索引。例如，ALTER TABLE table_name ADD INDEX index_name ( column1, column2, column3 ); （三）非聚簇索引与聚簇索引的区别聚簇索引和非聚簇索引的主要区别在于它们的存储方式、查找效率以及数据行修改的影响。 存储方式不同：聚簇索引的叶子节点直接包含了数据行，这意味着数据和索引在一起存储。在InnoDB中，主键默认就是聚簇索引。非聚簇索引的数据行和索引结构是分开存储的，叶子节点包含指向数据行的指针。 查找效率不同：聚簇索引由于其数据和索引紧耦合的特性，在查找特定值或范围的查询时非常高效。非聚簇索引在查找数据时需要进行额外的物理读取，因此在某些情况下会比聚簇索引慢一些。 数据行修改的影响不同：当数据行发生修改时，聚簇索引可能需要移动或调整相应的数据行位置，这可能会导致页分裂等问题。而非聚簇索引只需更新索引树和数据页，不会影响到其他数据行的位置。 ​ 此外，在MySQL的InnoDB存储引擎中，除了主键作为聚簇索引外，其他创建的索引如复合索引、前缀索引、唯一索引等都是非聚簇索引，也被称为辅助索引。这些辅助索引的叶子节点存储的不是数据的物理位置，而是主键值，通过主键值再去查找实际的数据行。 ​ 综上所述，聚簇索引和非聚簇索引在存储方式、查找效率等方面上有明显的差异。聚簇索引适合用于频繁访问的数据，而非聚簇索引则适用于插入操作频繁的场景。在设计数据库表和索引时，需要根据具体的应用场景和查询需求来选择合适的索引类型。 （二）注意查看查询执行计划：如果查看的属性列上有索引和没有索引，系统是读取数据的方式有何不同？Clsnum列上没有索引时： 根据这个执行计划，我们可以知道这个查询是一个全表扫描，针对GAUSSDBTEST用户的CLASS表进行操作。 为Clsnum列上创建索引后（CREATE INDEX index_clsnum ON class(clsnum);）： 根据这个执行计划，可以推断出以下信息： 1、这个查询是通过使用名为INDEX_CLSNUM的索引来访问名为CLASS的表。 2、索引访问方式是FAST FULL SCAN，即快速全扫描，这通常意味着将扫描整个索引以找到匹配的行。 *例外：在有些数据库中如果一个表上建立了一个索引，那么在这个表上的所有查询都将是索引查询，都会利用这个索引去读取表中的数据，不管索引所属于的属性列是否被涉及。* （三）为什么有时候即使使用了Order by操作，但查询计划里并没有相应的操作？对于distinct也有类似的情况。 用主键clsno作为Order by的条件时，在执行计划中会发现并没有执行Order by操作； 利用tchno作为order by的条件的时候，在执行计划里就会有相应order by的操作。 从上面两个对比，我们可以知道，当order by后面的属性上已经有索引使数据按照顺序存放的时候，再用order by不会再执行一次排序工作；但是当order by后面的属性列上没有相应的约束时，当这个属性列作为order by的条件，会进行一次sort排序工作。 （四）对于distinct的情况：如果要求distinct的属性列上已经没有是没有重复的了，那么就不会再执行一次distinct操作；如果这个属性列上本身并没有使它不重复的约束，那么会执行一次distinct操作。（没有使它不重复的约束） （添加后） （五）关于链接查询​ 通过查询相关信息我们知道，系统只辨别等值连接，如果要进行自然连接，我们应该在查询语句中自己输入好select的条件，例如我们上面写出elective.courNo,elective.elcTime,elective.elcGrade，而不是只写出elective.*，由系统去辨别这是自然连接，然后执行查询。等值连接和自然连接是数据库中用于关联两个表的两种不同的连接方式。具体区别如下： 连接条件：等值连接不要求连接的属性值完全相同，而自然连接要求进行比较的两个关系中必须有相同的属性组，即值域必须相同。 重复属性处理：等值连接不会去掉重复属性，而自然连接会去掉重复的属性列。这意味着自然连接实际上是去除了重复列的等值连接。 公共属性要求：等值连接要求相等的分量，不一定是公共属性；而自然连接要求相等的分量必须是公共属性。 操作结果：自然连接在等值连接的基础上进行投影操作，去掉了S中的公共属性列。当两个关系没有公共属性时，自然连接就转化成笛卡尔积。 ​ 总的来说，自然连接是一种特殊类型的等值连接，它在等值连接的基础上进行了额外的属性去除操作。在实际使用中，根据查询需求的不同选择合适的连接类型是非常重要的。 相关嵌套查询和非相关嵌套查询是SQL中两种常见的嵌套查询方式。 相关嵌套查询（Correlated Nested Query）： - 相关嵌套查询是指子查询的结果依赖于外部查询的某个值或条件。 - 在执行相关嵌套查询时，外部查询的每一行都会执行一次子查询，因此可能导致性能问题。 非相关嵌套查询（Non-correlated Nested Query）： - 非相关嵌套查询是指子查询的结果不依赖于外部查询的任何值或条件。 - 在执行非相关嵌套查询时，子查询只会执行一次，然后将结果用于外部查询。 总结：相关嵌套查询和非相关嵌套查询的主要区别在于子查询的结果是否依赖于外部查询的值或条件。相关嵌套查询可能导致性能问题，而非相关嵌套查询则更加高效。 IN、EXISTS、ANY、ALL和SOME在SQL中都是用来处理子查询的关键字，它们之间存在一定的等价关系。以下是具体的分析： - IN：当主查询中的值在子查询返回的结果集中时，IN条件为真。它相当于使用等于（&#x3D;）比较运算符与子查询结果集中的每一个值进行比较。 - EXISTS：当子查询至少返回一行数据时，EXISTS条件为真。它不对子查询的结果集进行缓存，只关心是否有结果返回。如果子查询没有返回任何行，EXISTS返回false。 - ANY（或SOME）：当主查询中的值满足子查询结果集中的任何一个值时，ANY（或SOME）条件为真。它相当于使用比较运算符（如&#x3D;、&gt;、&lt;等）与子查询结果集中的每一个值进行比较。 - ALL：当主查询中的值满足子查询结果集中所有值的条件时，ALL条件为真。它要求主查询中的值必须同时满足子查询结果集中所有值的比较条件。 ​ 总的来说，这些关键字在处理子查询时有着不同的应用场景和效率考虑，选择合适的关键字可以帮助提高查询的性能。在实际使用时，需要根据具体的数据和查询需求来选择最合适的关键字。","categories":[],"tags":[]},{"title":"无敌暴龙队","slug":"无敌暴龙队","date":"2024-05-10T11:34:23.000Z","updated":"2024-05-10T11:38:18.652Z","comments":true,"path":"2024/05/10/无敌暴龙队/","permalink":"https://zzx-dear.github.io/2024/05/10/%E6%97%A0%E6%95%8C%E6%9A%B4%E9%BE%99%E9%98%9F/","excerpt":"","text":"重生之我是占稳第一章：莫欺少年穷！第二章：莫欺中年穷！第三章：莫欺老年穷！","categories":[],"tags":[]}],"categories":[],"tags":[]}